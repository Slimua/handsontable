parableConv, but is unspecified.");if(null!=r.kernelInitializer||null!=r.kernelRegularizer||null!=r.kernelConstraint)throw new ValueError("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=r.padding&&"same"!==r.padding&&"valid"!==r.padding)throw new ValueError("SeparableConv"+n.rank+"D supports only padding modes: 'same' and 'valid', but received "+JSON.stringify(r.padding));return n.depthMultiplier=null==r.depthMultiplier?1:r.depthMultiplier,n.depthwiseInitializer=getInitializer(r.depthwiseInitializer||n.DEFAULT_DEPTHWISE_INITIALIZER),n.depthwiseRegularizer=getRegularizer(r.depthwiseRegularizer),n.depthwiseConstraint=getConstraint(r.depthwiseConstraint),n.pointwiseInitializer=getInitializer(r.depthwiseInitializer||n.DEFAULT_POINTWISE_INITIALIZER),n.pointwiseRegularizer=getRegularizer(r.pointwiseRegularizer),n.pointwiseConstraint=getConstraint(r.pointwiseConstraint),n}return __extends$1(t,e),t.prototype.build=function(e){if((e=getExactlyOneShape(e)).length<this.rank+2)throw new ValueError("Inputs to SeparableConv"+this.rank+"D should have rank "+(this.rank+2)+", but received input shape: "+JSON.stringify(e));var t,r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r]||e[r]<0)throw new ValueError("The channel dimension of the inputs should be defined, but found "+JSON.stringify(e[r]));for(var n=e[r],a=this.kernelSize.concat([n,this.depthMultiplier]),o=[],i=0;i<this.rank;++i)o.push(1);o.push(n*this.depthMultiplier,this.filters),this.depthwiseKernel=this.addWeight("depthwise_kernel",a,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",o,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new InputSpec({ndim:this.rank+2,axes:(t={},t[r]=n,t)})],this.built=!0},t.prototype.call=function(e,t){var r=this;return tidy(function(){var t;if(e=getExactlyOneTensor(e),1===r.rank)throw new NotImplementedError("1D separable convolution is not implemented yet.");return 2===r.rank&&("channelsFirst"===r.dataFormat&&(e=transpose(e,[0,2,3,1])),t=separableConv2d(e,r.depthwiseKernel.read(),r.pointwiseKernel.read(),r.strides,r.padding,r.dilationRate,"NHWC")),r.useBias&&(t=biasAdd(t,r.bias.read(),r.dataFormat)),null!=r.activation&&(t=r.activation.apply(t)),"channelsFirst"===r.dataFormat&&(t=transpose(t,[0,3,1,2])),t})},t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this);return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=serializeInitializer(this.depthwiseInitializer),t.pointwiseInitializer=serializeInitializer(this.pointwiseInitializer),t.depthwiseRegularizer=serializeRegularizer(this.depthwiseRegularizer),t.pointwiseRegularizer=serializeRegularizer(this.pointwiseRegularizer),t.depthwiseConstraint=serializeConstraint(this.depthwiseConstraint),t.pointwiseConstraint=serializeConstraint(this.pointwiseConstraint),t},t.className="SeparableConv",t}(Conv),SeparableConv2D=function(e){function t(t){return e.call(this,2,t)||this}return __extends$1(t,e),t.className="SeparableConv2D",t}(SeparableConv);serialization.registerClass(SeparableConv2D);var Conv1D=function(e){function t(r){var n=e.call(this,1,r)||this;return t.verifyConfig(r),n.inputSpec=[{ndim:3}],n}return __extends$1(t,e),t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this);return delete t.rank,delete t.dataFormat,t},t.verifyConfig=function(e){if("number"!=typeof e.kernelSize&&!checkArrayTypeAndLength(e.kernelSize,"number",1,1))throw new ValueError("Conv1D expects config.kernelSize to be number or number[] with length 1, but received "+JSON.stringify(e.kernelSize)+".")},t.className="Conv1D",t}(Conv);serialization.registerClass(Conv1D);var Cropping2D=function(e){function t(t){var r=e.call(this,t)||this;return"number"==typeof t.cropping?r.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:"number"==typeof t.cropping[0]?r.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:r.cropping=t.cropping,r.dataFormat=void 0===t.dataFormat?"channelsLast":t.dataFormat,r.inputSpec=[{ndim:4}],r}return __extends$1(t,e),t.prototype.computeOutputShape=function(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]},t.prototype.call=function(e,t){var r=this;return tidy(function(){return e=getExactlyOneTensor(e),"channelsLast"===r.dataFormat?sliceAlongAxis(sliceAlongAxis(e,r.cropping[0][0],e.shape[1]-r.cropping[0][0]-r.cropping[0][1],2),r.cropping[1][0],e.shape[2]-r.cropping[1][1]-r.cropping[1][0],3):sliceAlongAxis(sliceAlongAxis(e,r.cropping[0][0],e.shape[2]-r.cropping[0][0]-r.cropping[0][1],3),r.cropping[1][0],e.shape[3]-r.cropping[1][1]-r.cropping[1][0],4)})},t.prototype.getConfig=function(){var t={cropping:this.cropping,dataFormat:this.dataFormat},r=e.prototype.getConfig.call(this);return Object.assign(t,r),t},t.className="Cropping2D",t}(Layer);serialization.registerClass(Cropping2D);var UpSampling2D=function(e){function t(t){var r=e.call(this,t)||this;return r.DEFAULT_SIZE=[2,2],r.inputSpec=[{ndim:4}],r.size=null==t.size?r.DEFAULT_SIZE:t.size,r.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,r}return __extends$1(t,e),t.prototype.computeOutputShape=function(e){if("channelsFirst"===this.dataFormat){var t=null==e[2]?null:this.size[0]*e[2],r=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,r]}return t=null==e[1]?null:this.size[0]*e[1],r=null==e[2]?null:this.size[1]*e[2],[e[0],t,r,e[3]]},t.prototype.call=function(e,t){var r=this;return tidy(function(){var t=getExactlyOneTensor(e),n=t.shape;if("channelsFirst"===r.dataFormat){t=transpose(t,[0,2,3,1]);var a=r.size[0]*n[2],o=r.size[1]*n[3],i=t.resizeNearestNeighbor([a,o]);return transpose(i,[0,3,1,2])}return a=r.size[0]*n[1],o=r.size[1]*n[2],t.resizeNearestNeighbor([a,o])})},t.prototype.getConfig=function(){var t={size:this.size,dataFormat:this.dataFormat},r=e.prototype.getConfig.call(this);return Object.assign(t,r),t},t.className="UpSampling2D",t}(Layer);function depthwiseConv2d$1(e,t,r,n,a,o){return void 0===r&&(r=[1,1]),void 0===n&&(n="valid"),tidy(function(){null==a&&(a=imageDataFormat()),checkDataFormat(a);var i=preprocessConv2DInput(e,a);if(4!==e.rank)throw new ValueError("Input for depthwiseConv2d is required to be 4-D, but is instead "+e.rank+"-D");if(4!==t.rank)throw new ValueError("depthwiseKernel is required to be 4-D, but is instead "+t.rank+"-D");return i=depthwiseConv2d(i,t,r,"same"===n?"same":"valid","NHWC",o),"channelsFirst"===a&&(i=transpose(i,[0,3,1,2])),i})}serialization.registerClass(UpSampling2D);var DepthwiseConv2D=function(e){function t(t){var r=e.call(this,2,t)||this;return r.depthwiseKernel=null,r.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,r.depthwiseInitializer=getInitializer(t.depthwiseInitializer||r.DEFAULT_KERNEL_INITIALIZER),r.depthwiseConstraint=getConstraint(t.depthwiseConstraint),r.depthwiseRegularizer=getRegularizer(t.depthwiseRegularizer),r}return __extends$1(t,e),t.prototype.build=function(e){if((e=getExactlyOneShape(e)).length<4)throw new ValueError("Inputs to DepthwiseConv2D should have rank 4. Received input shape: "+JSON.stringify(e)+".");var t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new ValueError("The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not ("+e[t]+").");var r=e[t],n=[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",n,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0},t.prototype.call=function(e,t){var r=this;return tidy(function(){var t=depthwiseConv2d$1(e=getExactlyOneTensor(e),r.depthwiseKernel.read(),r.strides,r.padding,r.dataFormat,null);return r.useBias&&(t=biasAdd(t,r.bias.read(),r.dataFormat)),null!=r.activation&&(t=r.activation.apply(t)),t})},t.prototype.computeOutputShape=function(e){e=getExactlyOneShape(e);var t="channelsFirst"===this.dataFormat?e[2]:e[1],r="channelsFirst"===this.dataFormat?e[3]:e[2],n="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=convOutputLength(t,this.kernelSize[0],this.padding,this.strides[0]),o=convOutputLength(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],n,a,o]:[e[0],a,o,n]},t.prototype.getConfig=function(){var t=e.prototype.getConfig.call(this);return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=serializeInitializer(this.depthwiseInitializer),t.depthwiseRegularizer=serializeRegularizer(this.depthwiseRegularizer),t.depthwiseConstraint=serializeConstraint(this.depthwiseRegularizer),t},t.className="DepthwiseConv2D",t}(BaseConv);serialization.registerClass(DepthwiseConv2D);var Dropout=function(e){function t(t){var r=e.call(this,t)||this;if(r.rate=Math.max(Math.min(t.rate,1),0),r.rateScalar=getScalar(r.rate),r.noiseShape=t.noiseShape,r.seed=t.seed,null!=r.seed)throw new NotImplementedError("Non-default seed is not implemented in Dropout layer yet: "+r.seed);return r.supportsMasking=!0,r}return __extends$1(t,e),t.prototype.getNoiseShape=function(e){if(null==this.noiseShape)return this.noiseShape;for(var t=e.shape,r=[],n=0;n<this.noiseShape.length;++n)r.push(null==this.noiseShape[n]?t[n]:this.noiseShape[n]);return r},t.prototype.call=function(e,t){var r=this;return tidy(function(){r.invokeCallHook(e,t);var n=getExactlyOneTensor(e);if(null!=r.noiseShape&&!util.arraysEqual(n.shape,r.noiseShape))throw new NotImplementedError("Non-default noise shape is not implemented in Dropout layer yet: "+JSON.stringify(r.noiseShape));if(0<r.rate&&r.rate<1){var a=null!=t.training&&t.training,o=r.getNoiseShape(n);return inTrainPhase(function(){return dropout(n,r.rateScalar,o,r.seed)},function(){return n},a)}return e})},t.prototype.getConfig=function(){var t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},r=e.prototype.getConfig.call(this);return Object.assign(t,r),t},t.className="Dropout",t}(Layer);serialization.registerClass(Dropout);var Dense=function(e){function t(t){var r=e.call(this,t)||this;if(r.activation=null,r.useBias=!0,r.kernel=null,r.bias=null,r.DEFAULT_KERNEL_INITIALIZER="glorotNormal",r.DEFAULT_BIAS_INITIALIZER="zeros",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){var n=null;null!=t.batchSize&&(n=t.batchSize),r.batchInputShape=[n,t.inputDim]}return r.units=t.units,r.activation=getActivation(t.activation),null!=t.useBias&&(r.useBias=t.useBias),r.kernelInitializer=getInitializer(t.kernelInitializer||r.DEFAULT_KERNEL_INITIALIZER),r.bia